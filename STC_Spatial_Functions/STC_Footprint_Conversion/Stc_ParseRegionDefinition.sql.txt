SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[fnStc_ParseRegionDefinition](@regionDefinition varchar(max))
RETURNS @vertexList TABLE(regionNumber int, regionSys char(3), regionType varchar(max), coordSys varchar(max), 
                          pointNumber int, xVal1 varchar(max), yVal1 varchar(max), xVal2 varchar(max), yVal2 varchar(max))
-- Function to convert region definitions into a list of region vertices
-- Note that JHU syntax is same as STC except it allows multiple regions. JHU has J2000 defined but STC does not.
AS BEGIN
	-- declare variables
	declare @regionNumber int=0, @regionSys char(3)=null, @regionType varchar(max)=null, @regionData varchar(max)=null
	declare @pointNumber int=0, @xVal1 varchar(max)=null, @yVal1 varchar(max)=null, @xVal2 varchar(max)=null, @yVal2 varchar(max)=null
	DECLARE @geographyType varchar(max)
	DECLARE @geographyData varchar(max)
	DECLARE @geographyCount int=0, @length int=0, @dataLength int=0
	DECLARE @idx int=-1, @idx1 int=-1, @idx2 int=-1, @idx3 int=-1, @idx4 int=-1, @idx5 int=-1, @idx6 int=-1, @idx7 int=-1, @idx8 int=-1
	declare @idxPoint int=-1, @idxMultiPoint int=-1, @idxLinestring int=-1, @idxMultiLinestring int=-1
	declare @idxPolygon int=-1, @idxMultiPolygon int=-1, @idxGeometryCollection int=-1
	declare @idxPosition int=-1, @idxCircle int=-1, @idxBox int=-1, @idxRange int=-1
	declare @idxEcliptic int=-1, @idxFk4 int=-1, @idxFk5 int=-1, @idxGalactic int=-1, @idxJ2000 int=-1
	declare @idxIcrs int=-1, @idxUnknownFrame int=-1, @idxMjd int=-1, @idxGsc1 int=-1, @idxWavelength int=-1, @idxOther int=-1
	declare @idxBarycenter int=-1, @idxGeocenter int=-1, @idxHeliocenter int=-1, @idxTopocenter int=-1
	declare @idxRelocatable int=-1, @idxUnknownRefpos int=-1, @idxLsr int=-1
	declare @idxCartesian1 int=-1, @idxCartesian2 int=-1, @idxCartesian3 int=-1, @idxSpherical2 int=-1
	declare @idxParentheses int=-1, @idxComma int=-1, @idxSpace int=-1
	declare @idxUnion int=-1, @idxIntersection int=-1, @idxNot int=-1
	declare @idxRegionStart int=-1, @idxRegionEnd int=-1
	DECLARE @frameType varchar(max)='', @refposType varchar(max)='', @flavorType varchar(max)='', @coordSys varchar(max)=''
	declare @dataValues TABLE(dataValues varchar(max))
	declare @nValues int, @xVal varchar(max), @yVal varchar(max)
	declare @nRegions int, @nRegionTypes int, @nPoints int, @nRows int
	declare @nPosition int, @nCircle int, @nBox int, @nPolygon int, @nPoint int, @nLinestring int, @nRange int
--..................................................................................
	-- Scan string for keywords to identify whether it is STC, WKT or JHU definition

	SET @regionDefinition=RTRIM(LTRIM(UPPER(dbo.fnStr_RemoveMultipleSpaces(@regionDefinition))))
	SET @length=LEN(@regionDefinition)

	-- Region Types
	set @idxPoint=charindex('POINT',@regionDefinition)
	set @idxMultiPoint=charindex('MULTIPOINT',@regionDefinition)
	set @idxLinestring=charindex('LINESTRING',@regionDefinition)
	set @idxMultiLinestring=charindex('MULTILINESTRING',@regionDefinition)
	set @idxPolygon=charindex('POLYGON',@regionDefinition)
	set @idxMultiPolygon=charindex('MULTIPOLYGON',@regionDefinition)
	set @idxGeometryCollection=charindex('GEOMETRYCOLLECTION',@regionDefinition)
	set @idxPosition=charindex('POSITION',@regionDefinition)
	set @idxCircle=charindex('CIRCLE',@regionDefinition)
	set @idxBox=charindex('BOX',@regionDefinition)
	set @idxRange=charindex('RANGE',@regionDefinition)
	-- Reference frames
	set @idxEcliptic=charindex('ECLIPTIC',@regionDefinition)
	set @idxFk4=charindex('FK4',@regionDefinition)
	set @idxFk5=charindex('FK5',@regionDefinition)
	set @idxGalactic=charindex('GALACTIC',@regionDefinition)
	set @idxJ2000=charindex('J2000',@regionDefinition)
	set @idxIcrs=charindex('ICRS',@regionDefinition)
	set @idxUnknownFrame=charindex('UNKNOWNFRAME',@regionDefinition)
	set @idxOther=charindex('OTHER',@regionDefinition)
	set @idxMjd=charindex('MJD',@regionDefinition)
	set @idxGsc1=charindex('GSC1',@regionDefinition)
	set @idxWavelength=charindex('WAVELENGTH',@regionDefinition)
	set @idxBarycenter=charindex('BARYCENTER',@regionDefinition)
	set @idxGeocenter=charindex('GEOCENTER',@regionDefinition)
	set @idxHeliocenter=charindex('HELIOCENTER',@regionDefinition)
	set @idxTopocenter=charindex('TOPOCENTER',@regionDefinition)
	set @idxRelocatable=charindex('RELOCATABLE',@regionDefinition)
	set @idxUnknownRefpos=charindex('UNKNOWNREFPOS',@regionDefinition)
	set @idxLsr=charindex('LSR',@regionDefinition)
	set @idxCartesian1=charindex('CARTESIAN1',@regionDefinition)
	set @idxCartesian2=charindex('CARTESIAN2',@regionDefinition)
	set @idxCartesian3=charindex('CARTESIAN3',@regionDefinition)
	set @idxSpherical2=charindex('SPHERICAL2',@regionDefinition)
	-- punctuation
	set @idxParentheses=charindex('(',@regionDefinition)
	set @idxComma=charindex(',',@regionDefinition)

	-- Simple WKT cases
	if (@idxPoint>0 or @idxMultiPoint>0 or @idxLinestring>0 or @idxMultiLinestring>0 or @idxMultiPolygon>0 or @idxGeometryCollection>0) set @regionSys='WKT'
	-- Simple STC cases
	if (@idxPosition>0 or @idxBox>0 or @idxRange>0) set @regionSys='STC'
	-- Simple JHU cases
	if (@idxJ2000>0) set @regionSys='JHU'
	
	-- Try to resolve overlapping cases (polygon used by WKT, STC, JHU & circle used by STC, JHU) Note that JHU & STC equivalent so use STC as default
	if (@regionSys is null)
	begin
		if (@idxCircle>0) set @regionSys='STC'	
		if (@idxPolygon>0 and @idxComma>0) set @regionSys='WKT' else set @regionSys='STC'
	end

	-- Catch STC cases not handled
	if (@idxUnion>0 or @idxIntersection>0 or @idxNot>0)
	begin
		insert @vertexList 
		select null, @regionSys, 'error', null, null, null, null, null, null
		return
	end
--..................................................................................
-- Transform WKT to same syntax as STC/JHU for processing
-- GEOMETRYCOLLECTION (geography,...)
-- POINT(x y)
-- MULTIPOINT(x1 y1,x2 y2...) or MULTIPOINT((x1 y1)(x2 y2)...)
-- LINESTRING(x1 y1,x2 y2, ...)
-- MULTILINESTRING((x1 y1,x2 y2...),(xa ya,xb yb...), ...)
-- POLYGON((x1 y1,x2 y2...),(xa ya,xb yb...), ...)
-- MULTIPOLYGON(((x1 y1,x2 y2...)),((xa ya,xb yb...), ...))

	if (@regionSys='WKT')
	begin
		set @regionDefinition=dbo.fnStr_replacei(@regionDefinition,'), (','),(')		

		if (@idxGeometryCollection>0)	-- remove GEOMETRYCOLLECTION ()
		begin
			set @idx1=charindex('(',@regionDefinition,@idxGeometryCollection)
			set @idx2=@length-charindex(')',reverse(@regionDefinition))
			set @regionDefinition=substring(@regionDefinition,@idx1+1,@idx2-@idx1)
		end
		if (@idxMultiPoint>0)		-- replace multi with individual
		begin
			set @regionDefinition=dbo.fnStr_replacei(@regionDefinition,'MULTIPOINT',' POINT ')		
			set @regionDefinition=dbo.fnStr_replacei(@regionDefinition,'), (',' POINT ')		
			set @regionDefinition=dbo.fnStr_replacei(@regionDefinition,'),(',' POINT ')		
			set @regionDefinition=dbo.fnStr_replacei(@regionDefinition,',',' POINT ')		
		end
		if (@idxMultiLinestring>0)		-- replace multi with individual
		begin
			set @regionDefinition=dbo.fnStr_replacei(@regionDefinition,'MULTILINESTRING',' LINESTRING ')		
			set @regionDefinition=dbo.fnStr_replacei(@regionDefinition,'),(',' LINESTRING ')		
		end
		if (@idxMultiPolygon>0)		-- replace multi with individual
		begin
			set @regionDefinition=dbo.fnStr_replacei(@regionDefinition,'MULTIPOLYGON',' POLYGON ')		
			set @regionDefinition=dbo.fnStr_replacei(@regionDefinition,')),((',' POLYGON ')		
		end
		set @regionDefinition=dbo.fnStr_replacei(@regionDefinition,'(',' ')
		set @regionDefinition=dbo.fnStr_replacei(@regionDefinition,')',' ')
		set @regionDefinition=dbo.fnStr_replacei(@regionDefinition,',',' ')
	end
--..................................................................................
-- Loop through definition finding regions

	SET @regionDefinition=RTRIM(LTRIM(UPPER(dbo.fnStr_RemoveMultipleSpaces(@regionDefinition))))
	SET @length=LEN(@regionDefinition)
	while (@length>0)
	begin
		-- look for next region
		set @idxBox=charindex('BOX',@regionDefinition)
		set @idxCircle=charindex('CIRCLE',@regionDefinition)
		set @idxLinestring=charindex('LINESTRING',@regionDefinition)
		set @idxPoint=charindex('POINT',@regionDefinition)
		set @idxPolygon=charindex('POLYGON',@regionDefinition)
		set @idxPosition=charindex('POSITION',@regionDefinition)
		set @idxRange=charindex('RANGE',@regionDefinition)
		set @idxRegionStart=@length
		if (@idxBox<@idxRegionStart and @idxBox>0) set @idxRegionStart=@idxBox
		if (@idxCircle<@idxRegionStart and @idxCircle>0) set @idxRegionStart=@idxCircle
		if (@idxLinestring<@idxRegionStart and @idxLinestring>0) set @idxRegionStart=@idxLinestring
		if (@idxPoint<@idxRegionStart and @idxPoint>0) set @idxRegionStart=@idxPoint
		if (@idxPolygon<@idxRegionStart and @idxPolygon>0) set @idxRegionStart=@idxPolygon
		if (@idxPosition<@idxRegionStart and @idxPosition>0) set @idxRegionStart=@idxPosition
		if (@idxRange<@idxRegionStart and @idxRange>0) set @idxRegionStart=@idxRange

		-- exit if no more regions found
		if @idxRegionStart=@length set @length=0

		-- process region
		if @length>0
		begin
			set @regionDefinition=SUBSTRING(@regionDefinition,@idxRegionStart,@length)
			set @length=len(@regionDefinition)
			begin
				set @regionNumber=@regionNumber+1

				-- identify type of region
				IF SUBSTRING(@regionDefinition,1,3)='BOX'			SET @regionType='BOX'
				IF SUBSTRING(@regionDefinition,1,6)='CIRCLE'		SET @regionType='CIRCLE'
				IF SUBSTRING(@regionDefinition,1,10)='LINESTRING'	SET @regionType='LINESTRING'
				IF SUBSTRING(@regionDefinition,1,5)='POINT'			SET @regionType='POINT'
				IF SUBSTRING(@regionDefinition,1,7)='POLYGON'		SET @regionType='POLYGON'
				IF SUBSTRING(@regionDefinition,1,8)='POSITION'		SET @regionType='POSITION'
				IF SUBSTRING(@regionDefinition,1,5)='RANGE'			SET @regionType='RANGE'
				set @idxSpace=charindex(' ',@regionDefinition)
				if @idxSpace>0 set @regionDefinition=substring(@regionDefinition,@idxSpace+1,@length)
				set @length=len(@regionDefinition)

				-- look for next region to find end of this one
				set @idxBox=charindex('BOX',@regionDefinition)
				set @idxCircle=charindex('CIRCLE',@regionDefinition)
				set @idxLinestring=charindex('LINESTRING',@regionDefinition)
				set @idxPoint=charindex('POINT',@regionDefinition)
				set @idxPolygon=charindex('POLYGON',@regionDefinition)
				set @idxPosition=charindex('POSITION',@regionDefinition)
				set @idxRange=charindex('RANGE',@regionDefinition)
				set @idxRegionEnd=@length
				if (@idxBox<@idxRegionEnd and @idxBox>0) set @idxRegionEnd=@idxBox
				if (@idxCircle<@idxRegionEnd and @idxCircle>0) set @idxRegionEnd=@idxCircle
				if (@idxLinestring<@idxRegionEnd and @idxLinestring>0) set @idxRegionEnd=@idxLinestring
				if (@idxPoint<@idxRegionEnd and @idxPoint>0) set @idxRegionEnd=@idxPoint
				if (@idxPolygon<@idxRegionEnd and @idxPolygon>0) set @idxRegionEnd=@idxPolygon
				if (@idxPosition<@idxRegionEnd and @idxPosition>0) set @idxRegionEnd=@idxPosition
				if (@idxRange<@idxRegionEnd and @idxRange>0) set @idxRegionEnd=@idxRange
				if @idxRegionEnd != @length set @idxRegionEnd=@idxRegionEnd-2

				set @regionData=substring(@regionDefinition,1,@idxRegionEnd)
				set @dataLength=len(@regionData)
				set @regionDefinition=substring(@regionDefinition,@idxRegionEnd+1,@length)
				set @length=len(@regionDefinition)
	
				-- check if coordinate system is defined
				set @idxEcliptic=charindex('ECLIPTIC',@regionData)
				set @idxFk4=charindex('FK4',@regionData)
				set @idxFk5=charindex('FK5',@regionData)
				set @idxGalactic=charindex('GALACTIC',@regionData)
				set @idxJ2000=charindex('J2000',@regionData)
				set @idxIcrs=charindex('ICRS',@regionData)
				set @idxUnknownFrame=charindex('UNKNOWNFRAME',@regionData)
				set @idxMjd=charindex('MJD',@regionData)
				set @idxGsc1=charindex('GSC1',@regionData)
				set @idxWavelength=charindex('WAVELENGTH',@regionData)
				set @idxOther=charindex('OTHER',@regionData)
				set @idx=@dataLength
				if (@idxEcliptic<@idx and @idxEcliptic>0) set @idx=@idxEcliptic
				if (@idxFk4<@idx and @idxFk4>0) set @idx=@idxFk4
				if (@idxFk5<@idx and @idxFk5>0) set @idx=@idxFk5
				if (@idxGalactic<@idx and @idxGalactic>0) set @idx=@idxGalactic
				if (@idxGsc1<@idx and @idxGsc1>0) set @idx=@idxGsc1
				if (@idxJ2000<@idx and @idxJ2000>0) set @idx=@idxJ2000
				if (@idxIcrs<@idx and @idxIcrs>0) set @idx=@idxIcrs
				if (@idxMjd<@idx and @idxMjd>0) set @idx=@idxMjd
				if (@idxWavelength<@idx and @idxWavelength>0) set @idx=@idxWavelength
				if (@idxUnknownFrame<@idx and @idxUnknownFrame>0) set @idx=@idxUnknownFrame
				if (@idxOther<@idx and @idxOther>0) set @idx=@idxOther
				set @idxSpace=charindex(' ',@regionData,@idx)
				if @idx=@dataLength set @idx=0
				if @idx>0 
				begin
					set @frameType=substring(@regionData,@idx,@idxSpace-@idx)
					set @regionData=substring(@regionData,@idxSpace+1,@dataLength)
					set @dataLength=len(@regionData)
				end

				-- check if reference position defined
				set @idxBarycenter=charindex('BARYCENTER',@regionData)
				set @idxGeocenter=charindex('GEOCENTER',@regionData)
				set @idxHeliocenter=charindex('HELIOCENTER',@regionData)
				set @idxLsr=charindex('LSR',@regionData)
				set @idxTopocenter=charindex('TOPOCENTER',@regionData)
				set @idxRelocatable=charindex('RELOCATABLE',@regionData)
				set @idxUnknownRefpos=charindex('UNKNOWNREFPOS',@regionData)
				set @idx=@dataLength
				if (@idxBarycenter<@idx and @idxBarycenter>0) set @idx=@idxBarycenter
				if (@idxGeocenter<@idx and @idxGeocenter>0) set @idx=@idxGeocenter
				if (@idxHeliocenter<@idx and @idxHeliocenter>0) set @idx=@idxHeliocenter
				if (@idxLsr<@idx and @idxLsr>0) set @idx=@idxLsr
				if (@idxTopocenter<@idx and @idxTopocenter>0) set @idx=@idxTopocenter
				if (@idxRelocatable<@idx and @idxRelocatable>0) set @idx=@idxRelocatable
				if (@idxUnknownRefpos<@idx and @idxUnknownRefpos>0) set @idx=@idxUnknownRefpos
				set @idxSpace=charindex(' ',@regionData,@idx)
				if @idx=@dataLength set @idx=0
				if @idx>0 
				begin
					set @refPosType=substring(@regionData,@idx,@idxSpace-@idx)
					set @regionData=substring(@regionData,@idxSpace+1,@dataLength)
					set @dataLength=len(@regionData)
				end

				-- check if flavor defined
				set @idxCartesian1=charindex('CARTESIAN1',@regionData)
				set @idxCartesian2=charindex('CARTESIAN2',@regionData)
				set @idxCartesian3=charindex('CARTESIAN3',@regionData)
				set @idxSpherical2=charindex('SPHERICAL2',@regionData)
				set @idx=@dataLength
				if (@idxCartesian1<@idx and @idxCartesian1>0) set @idx=@idxCartesian1
				if (@idxCartesian2<@idx and @idxCartesian2>0) set @idx=@idxCartesian2
				if (@idxCartesian3<@idx and @idxCartesian3>0) set @idx=@idxCartesian3
				if (@idxSpherical2<@idx and @idxSpherical2>0) set @idx=@idxSpherical2
				set @idxSpace=charindex(' ',@regionData,@idx)
				if @idx=@dataLength set @idx=0
				if @idx>0 
				begin
					set @flavorType=substring(@regionData,@idx,@idxSpace-@idx)
					set @regionData=substring(@regionData,@idxSpace+1,@dataLength)
					set @dataLength=len(@regionData)
				end
			
				set @coordSys=@frameType+' '+@refPosType+' '+@flavorType
--..................................................................................
-- Parse data values

				set @pointNumber=0
				while @dataLength>0
				begin
					-- get data in pairs
					set @pointNumber=@pointNumber+1
					set @idxSpace=charindex(' ',@regionData,@idx)
					set @xVal=substring(@regionData,1,@idxSpace-1)
					set @regionData=substring(@regionData,@idxSpace+1,@dataLength)
					set @dataLength=len(@regionData)
					set @idxSpace=charindex(' ',@regionData,@idx)
					if @idxSpace>0 
					begin
						set @yVal=substring(@regionData,1,@idxSpace-1) 
						set @regionData=substring(@regionData,@idxSpace+1,@dataLength)
						set @dataLength=len(@regionData)
					end
					else 
					begin
						set @yVal=@regionData
						set @regionData=''
						set @dataLength=0
					end

					if @regionType in ('POINT','POSITION','RANGE','POLYGON')	-- 2 values, ra/dec or min/max
					begin
						insert @vertexList 
							select @regionNumber, @regionSys, @regionType, @coordSys, @pointNumber, @xVal, @yVal, null, null
					end

					if @regionType in ('BOX','LINESTRING')	-- 4 values , ra/dec/rasize/decsize or ra1/dec1/ra2/dec2
					begin
						if @pointNumber=1 
						begin
							set @xVal1=@xVal
							set @yVal1=@yVal
						end

						if @pointNumber=2 
						begin
							set @xVal2=@xVal
							set @yVal2=@yVal
							insert @vertexList 
								select @regionNumber, @regionSys, @regionType, @coordSys, @pointNumber, @xVal1, @yVal1, @xVal2, @yVal2
						end
					end

					if @regionType='CIRCLE'	-- get radius as third parameter
					begin
						set @xVal2=@regionData
						set @regionData=''
						set @dataLength=0

						insert @vertexList 
							select @regionNumber, @regionSys, @regionType, @coordSys, @pointNumber, @xVal, @yVal, @xVal2, null
					end
				end
--..................................................................................
				-- exit if no more regions found
				if @idxRegionEnd=@length set @length=0
			end
		end
	end
--..................................................................................
	-- validate elements of footprint

	set @nRegions=(select max(regionNumber) from @vertexList)
	set @nRegionTypes=(select count(distinct regionType) from @vertexList)
	set @nPoints=(select count(*) from @vertexList)
	set @nPosition=(select count(regionNumber) from @vertexList where regionType='POSITION')
	set @nCircle=(select count(regionNumber) from @vertexList where regionType='CIRCLE')
	set @nBox=(select count(regionNumber) from @vertexList where regionType='BOX')
	set @nPolygon=(select count(distinct(regionNumber)) from @vertexList where regionType='POLYGON')
	set @nRange=(select count(regionNumber) from @vertexList where regionType='RANGE')
	set @nPoint=(select count(regionNumber) from @vertexList where regionType='POINT')
	set @nLinestring=(select count(regionNumber) from @vertexList where regionType='LINESTRING')
	
	if @nPolygon>1
	begin
		set @idx1=1
		while @idx1<=@nPolygon
		begin
			set @idx2=(select max(pointNumber) from @vertexList where regionNumber=@idx1)
			if @idx2<3 delete from @vertexList where regionNumber=@idx1
			set @idx1=@idx1+1
		end
	end

	RETURN 
END
GO


